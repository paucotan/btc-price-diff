{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useBtcPrice = (refreshInterval = 30000) => {\n  _s();\n  const [tickerItems, setTickerItems] = useState([{\n    id: 'btc-usd',\n    label: 'BTC/USD',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: '$'\n  }, {\n    id: 'btc-eur',\n    label: 'BTC/EUR',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: '€'\n  }, {\n    id: 'btc-eth',\n    label: 'BTC/ETH',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: 'Ξ'\n  }, {\n    id: 'btc-gold',\n    label: 'Gold (oz)',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: 'oz'\n  }]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const fetchBtcPrice = async () => {\n    try {\n      var _eurUsdResponse$data$;\n      setIsLoading(true);\n      setError(null);\n\n      // Fetch BTC prices\n      const [btcResponse, ethResponse, goldResponse, eurUsdResponse] = await Promise.all([\n      // BTC/USD and BTC/EUR\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'bitcoin',\n          vs_currencies: 'usd,eur',\n          include_24hr_change: true\n        }\n      }),\n      // ETH/USD for BTC/ETH conversion\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'ethereum',\n          vs_currencies: 'usd',\n          include_24hr_change: true\n        }\n      }),\n      // Gold price in USD (approximate)\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'pax-gold',\n          vs_currencies: 'usd'\n        }\n      }),\n      // EUR/USD rate for better accuracy\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'tether-eurt',\n          vs_currencies: 'usd'\n        }\n      })]);\n      const btcData = btcResponse.data.bitcoin;\n      const ethData = ethResponse.data.ethereum;\n      const goldData = goldResponse.data['pax-gold'];\n      const eurUsdRate = ((_eurUsdResponse$data$ = eurUsdResponse.data['tether-eurt']) === null || _eurUsdResponse$data$ === void 0 ? void 0 : _eurUsdResponse$data$.usd) || 1.0; // Fallback to 1.0 if API fails\n\n      // Calculate BTC/ETH price\n      const btcEthPrice = btcData.usd / ethData.usd;\n      const btcEthChange24h = (btcData.usd_24h_change - ethData.usd_24h_change) / (1 + ethData.usd_24h_change / 100) || 0;\n\n      // Calculate BTC/Gold price (gold price is per gram, converting to oz)\n      const goldPricePerOz = goldData.usd * 31.1; // 1 oz = 31.1 grams\n      const btcGoldPrice = btcData.usd / goldPricePerOz;\n\n      // Update ticker items with new data\n      setTickerItems(prevItems => prevItems.map(item => {\n        switch (item.id) {\n          case 'btc-usd':\n            return {\n              ...item,\n              currentPrice: btcData.usd,\n              priceChange24h: btcData.usd_24h_change\n            };\n          case 'btc-eur':\n            return {\n              ...item,\n              currentPrice: btcData.eur,\n              priceChange24h: btcData.eur_24h_change\n            };\n          case 'btc-eth':\n            return {\n              ...item,\n              currentPrice: btcEthPrice,\n              priceChange24h: btcEthChange24h\n            };\n          case 'btc-gold':\n            return {\n              ...item,\n              currentPrice: btcGoldPrice,\n              priceChange24h: btcData.usd_24h_change\n            };\n          default:\n            return item;\n        }\n      }));\n      setLastUpdated(Date.now());\n    } catch (err) {\n      console.error('Error fetching price data:', err);\n      setError('Failed to fetch price data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Initial fetch\n    fetchBtcPrice();\n\n    // Set up interval for refreshing data\n    const intervalId = setInterval(fetchBtcPrice, refreshInterval);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [refreshInterval]);\n  return {\n    items: tickerItems,\n    isLoading,\n    error,\n    lastUpdated\n  };\n};\n_s(useBtcPrice, \"jVASKfenFuG2c2tWo/skcIOyZno=\");\nexport default useBtcPrice;","map":{"version":3,"names":["useState","useEffect","axios","useBtcPrice","refreshInterval","_s","tickerItems","setTickerItems","id","label","currentPrice","priceChange24h","currencySymbol","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","fetchBtcPrice","_eurUsdResponse$data$","btcResponse","ethResponse","goldResponse","eurUsdResponse","Promise","all","get","params","ids","vs_currencies","include_24hr_change","btcData","data","bitcoin","ethData","ethereum","goldData","eurUsdRate","usd","btcEthPrice","btcEthChange24h","usd_24h_change","goldPricePerOz","btcGoldPrice","prevItems","map","item","eur","eur_24h_change","Date","now","err","console","intervalId","setInterval","clearInterval","items"],"sources":["/Users/ocean/code/paucotan/personal_projects/btc-price-diff/src/components/LiveBtcPrice/useBtcPrice.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport interface TickerItem {\n  id: string;\n  label: string;\n  currentPrice: number | null;\n  priceChange24h: number | null;\n  currencySymbol?: string;\n}\n\ninterface BtcPriceData {\n  items: TickerItem[];\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: number | null;\n}\n\nconst useBtcPrice = (refreshInterval = 30000): BtcPriceData => {\n  const [tickerItems, setTickerItems] = useState<TickerItem[]>([\n    { id: 'btc-usd', label: 'BTC/USD', currentPrice: null, priceChange24h: null, currencySymbol: '$' },\n    { id: 'btc-eur', label: 'BTC/EUR', currentPrice: null, priceChange24h: null, currencySymbol: '€' },\n    { id: 'btc-eth', label: 'BTC/ETH', currentPrice: null, priceChange24h: null, currencySymbol: 'Ξ' },\n    { id: 'btc-gold', label: 'Gold (oz)', currentPrice: null, priceChange24h: null, currencySymbol: 'oz' },\n  ]);\n  \n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<number | null>(null);\n\n  const fetchBtcPrice = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      // Fetch BTC prices\n      const [btcResponse, ethResponse, goldResponse, eurUsdResponse] = await Promise.all([\n        // BTC/USD and BTC/EUR\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'bitcoin',\n            vs_currencies: 'usd,eur',\n            include_24hr_change: true,\n          },\n        }),\n        // ETH/USD for BTC/ETH conversion\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'ethereum',\n            vs_currencies: 'usd',\n            include_24hr_change: true,\n          },\n        }),\n        // Gold price in USD (approximate)\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'pax-gold',\n            vs_currencies: 'usd',\n          },\n        }),\n        // EUR/USD rate for better accuracy\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'tether-eurt',\n            vs_currencies: 'usd',\n          },\n        }),\n      ]);\n\n      const btcData = btcResponse.data.bitcoin;\n      const ethData = ethResponse.data.ethereum;\n      const goldData = goldResponse.data['pax-gold'];\n      const eurUsdRate = eurUsdResponse.data['tether-eurt']?.usd || 1.0; // Fallback to 1.0 if API fails\n\n      // Calculate BTC/ETH price\n      const btcEthPrice = btcData.usd / ethData.usd;\n      const btcEthChange24h = ((btcData.usd_24h_change - ethData.usd_24h_change) / \n        (1 + ethData.usd_24h_change / 100)) || 0;\n\n      // Calculate BTC/Gold price (gold price is per gram, converting to oz)\n      const goldPricePerOz = goldData.usd * 31.1; // 1 oz = 31.1 grams\n      const btcGoldPrice = btcData.usd / goldPricePerOz;\n      \n      // Update ticker items with new data\n      setTickerItems(prevItems => prevItems.map(item => {\n        switch (item.id) {\n          case 'btc-usd':\n            return { ...item, currentPrice: btcData.usd, priceChange24h: btcData.usd_24h_change };\n          case 'btc-eur':\n            return { ...item, currentPrice: btcData.eur, priceChange24h: btcData.eur_24h_change };\n          case 'btc-eth':\n            return { ...item, currentPrice: btcEthPrice, priceChange24h: btcEthChange24h };\n          case 'btc-gold':\n            return { ...item, currentPrice: btcGoldPrice, priceChange24h: btcData.usd_24h_change };\n          default:\n            return item;\n        }\n      }));\n      \n      setLastUpdated(Date.now());\n    } catch (err) {\n      console.error('Error fetching price data:', err);\n      setError('Failed to fetch price data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Initial fetch\n    fetchBtcPrice();\n\n    // Set up interval for refreshing data\n    const intervalId = setInterval(fetchBtcPrice, refreshInterval);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [refreshInterval]);\n\n  return {\n    items: tickerItems,\n    isLoading,\n    error,\n    lastUpdated,\n  };\n};\n\nexport default useBtcPrice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}