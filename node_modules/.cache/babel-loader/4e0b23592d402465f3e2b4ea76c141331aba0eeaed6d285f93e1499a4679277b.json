{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nconst CACHE_KEY = 'btc_ticker_data';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\nconst REFRESH_INTERVAL = 60 * 1000; // 60 seconds\n\n// Add a simple retry wrapper with exponential backoff\nconst fetchWithRetry = async (url, options, retries = 3, backoff = 1000) => {\n  try {\n    const response = await axios.get(url, {\n      ...options,\n      timeout: 5000\n    });\n    return response;\n  } catch (error) {\n    if (retries > 0) {\n      console.log(`Retrying (${retries} attempts left)...`);\n      await new Promise(resolve => setTimeout(resolve, backoff));\n      return fetchWithRetry(url, options, retries - 1, backoff * 2);\n    }\n    throw error;\n  }\n};\nconst useBtcPrice = () => {\n  _s();\n  const [tickerItems, setTickerItems] = useState([{\n    id: 'btc-usd',\n    label: 'BTC/USD',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: '$'\n  }, {\n    id: 'btc-eur',\n    label: 'BTC/EUR',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: '€'\n  }, {\n    id: 'btc-eth',\n    label: 'BTC/ETH',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: 'Ξ'\n  }, {\n    id: 'btc-gold',\n    label: 'Gold (oz)',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: 'oz'\n  }]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const isMounted = useRef(true);\n  const getCachedData = () => {\n    const cached = localStorage.getItem(CACHE_KEY);\n    if (!cached) return null;\n    try {\n      const parsed = JSON.parse(cached);\n      if (Date.now() - parsed.lastUpdated < CACHE_DURATION) {\n        return parsed;\n      }\n    } catch (e) {\n      console.error('Error parsing cached data:', e);\n    }\n    return null;\n  };\n  const saveToCache = useCallback(items => {\n    try {\n      const dataToCache = {\n        items,\n        lastUpdated: Date.now()\n      };\n      localStorage.setItem(CACHE_KEY, JSON.stringify(dataToCache));\n    } catch (e) {\n      console.error('Error saving to cache:', e);\n    }\n  }, []);\n  const updateTickerItems = useCallback(newItems => {\n    setTickerItems(prevItems => prevItems.map(item => {\n      const updatedItem = newItems.find(newItem => newItem.id === item.id);\n      return updatedItem ? {\n        ...item,\n        ...updatedItem\n      } : item;\n    }));\n  }, []);\n  const fetchBtcPrice = useCallback(async () => {\n    if (!isMounted.current) return;\n    try {\n      const cachedData = getCachedData();\n      if (cachedData) {\n        updateTickerItems(cachedData.items);\n        setLastUpdated(cachedData.lastUpdated);\n        setIsLoading(false);\n        if (Date.now() - cachedData.lastUpdated < 60000) {\n          return;\n        }\n      }\n      setIsLoading(true);\n      setError(null);\n      const response = await fetchWithRetry('https://api.coingecko.com/api/v3/coins/markets', {\n        params: {\n          vs_currency: 'usd',\n          ids: 'bitcoin,ethereum,pax-gold',\n          price_change_percentage: '24h'\n        }\n      });\n      const data = response.data.reduce((acc, coin) => {\n        acc[coin.id] = coin;\n        return acc;\n      }, {});\n      const btcData = data.bitcoin;\n      const ethData = data.ethereum;\n      const goldData = data['pax-gold'];\n      if (!btcData || !ethData || !goldData) {\n        throw new Error('Incomplete data received from API');\n      }\n      const btcEthPrice = btcData.current_price / ethData.current_price;\n      const btcEthChange24h = (btcData.price_change_percentage_24h - ethData.price_change_percentage_24h) / (1 + ethData.price_change_percentage_24h / 100) || 0;\n      const goldPricePerOz = goldData.current_price * 31.1;\n      const btcGoldPrice = btcData.current_price / goldPricePerOz;\n      const updatedItems = [{\n        id: 'btc-usd',\n        label: 'BTC/USD',\n        currentPrice: btcData.current_price,\n        priceChange24h: btcData.price_change_percentage_24h,\n        currencySymbol: '$'\n      }, {\n        id: 'btc-eur',\n        label: 'BTC/EUR',\n        currentPrice: btcData.current_price * 0.9,\n        priceChange24h: btcData.price_change_percentage_24h,\n        currencySymbol: '€'\n      }, {\n        id: 'btc-eth',\n        label: 'BTC/ETH',\n        currentPrice: btcEthPrice,\n        priceChange24h: btcEthChange24h,\n        currencySymbol: 'Ξ'\n      }, {\n        id: 'btc-gold',\n        label: 'Gold (oz)',\n        currentPrice: btcGoldPrice,\n        priceChange24h: btcData.price_change_percentage_24h,\n        currencySymbol: 'oz'\n      }];\n      updateTickerItems(updatedItems);\n      setLastUpdated(Date.now());\n      saveToCache(updatedItems);\n    } catch (err) {\n      console.error('Error fetching price data:', err);\n      setError('Failed to fetch live data. Using cached data if available.');\n      const cachedData = getCachedData();\n      if (cachedData) {\n        updateTickerItems(cachedData.items);\n        setLastUpdated(cachedData.lastUpdated);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n      }\n    }\n  }, [saveToCache, updateTickerItems]);\n  useEffect(() => {\n    isMounted.current = true;\n    fetchBtcPrice();\n    const intervalId = setInterval(fetchBtcPrice, REFRESH_INTERVAL);\n    return () => {\n      isMounted.current = false;\n      clearInterval(intervalId);\n    };\n  }, [fetchBtcPrice]);\n  return {\n    items: tickerItems,\n    isLoading,\n    error,\n    lastUpdated,\n    refresh: fetchBtcPrice\n  };\n};\n_s(useBtcPrice, \"OxIaL0Gus2bgeZZmcv70V47t/jk=\");\nexport default useBtcPrice;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","axios","CACHE_KEY","CACHE_DURATION","REFRESH_INTERVAL","fetchWithRetry","url","options","retries","backoff","response","get","timeout","error","console","log","Promise","resolve","setTimeout","useBtcPrice","_s","tickerItems","setTickerItems","id","label","currentPrice","priceChange24h","currencySymbol","isLoading","setIsLoading","setError","lastUpdated","setLastUpdated","isMounted","getCachedData","cached","localStorage","getItem","parsed","JSON","parse","Date","now","e","saveToCache","items","dataToCache","setItem","stringify","updateTickerItems","newItems","prevItems","map","item","updatedItem","find","newItem","fetchBtcPrice","current","cachedData","params","vs_currency","ids","price_change_percentage","data","reduce","acc","coin","btcData","bitcoin","ethData","ethereum","goldData","Error","btcEthPrice","current_price","btcEthChange24h","price_change_percentage_24h","goldPricePerOz","btcGoldPrice","updatedItems","err","intervalId","setInterval","clearInterval","refresh"],"sources":["/Users/ocean/code/paucotan/personal_projects/btc-price-diff/src/components/LiveBtcPrice/useBtcPrice.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\n\ninterface TickerItem {\n  id: string;\n  label: string;\n  currentPrice: number | null;\n  priceChange24h: number | null;\n  currencySymbol: string;\n}\n\ninterface CachedData {\n  items: TickerItem[];\n  lastUpdated: number;\n}\n\nconst CACHE_KEY = 'btc_ticker_data';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\nconst REFRESH_INTERVAL = 60 * 1000; // 60 seconds\n\n// Add a simple retry wrapper with exponential backoff\nconst fetchWithRetry = async (\n  url: string, \n  options: Record<string, unknown>, \n  retries = 3, \n  backoff = 1000\n): Promise<any> => {\n  try {\n    const response = await axios.get(url, { ...options, timeout: 5000 });\n    return response;\n  } catch (error) {\n    if (retries > 0) {\n      console.log(`Retrying (${retries} attempts left)...`);\n      await new Promise(resolve => setTimeout(resolve, backoff));\n      return fetchWithRetry(url, options, retries - 1, backoff * 2);\n    }\n    throw error;\n  }\n};\n\nconst useBtcPrice = () => {\n  const [tickerItems, setTickerItems] = useState<TickerItem[]>([\n    { id: 'btc-usd', label: 'BTC/USD', currentPrice: null, priceChange24h: null, currencySymbol: '$' },\n    { id: 'btc-eur', label: 'BTC/EUR', currentPrice: null, priceChange24h: null, currencySymbol: '€' },\n    { id: 'btc-eth', label: 'BTC/ETH', currentPrice: null, priceChange24h: null, currencySymbol: 'Ξ' },\n    { id: 'btc-gold', label: 'Gold (oz)', currentPrice: null, priceChange24h: null, currencySymbol: 'oz' },\n  ]);\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<number | null>(null);\n  const isMounted = useRef(true);\n\n  const getCachedData = (): CachedData | null => {\n    const cached = localStorage.getItem(CACHE_KEY);\n    if (!cached) return null;\n    \n    try {\n      const parsed = JSON.parse(cached);\n      if (Date.now() - parsed.lastUpdated < CACHE_DURATION) {\n        return parsed;\n      }\n    } catch (e) {\n      console.error('Error parsing cached data:', e);\n    }\n    return null;\n  };\n\n  const saveToCache = useCallback((items: TickerItem[]) => {\n    try {\n      const dataToCache = {\n        items,\n        lastUpdated: Date.now(),\n      };\n      localStorage.setItem(CACHE_KEY, JSON.stringify(dataToCache));\n    } catch (e) {\n      console.error('Error saving to cache:', e);\n    }\n  }, []);\n\n  const updateTickerItems = useCallback((newItems: TickerItem[]) => {\n    setTickerItems(prevItems => \n      prevItems.map(item => {\n        const updatedItem = newItems.find(newItem => newItem.id === item.id);\n        return updatedItem ? { ...item, ...updatedItem } : item;\n      })\n    );\n  }, []);\n\n  const fetchBtcPrice = useCallback(async () => {\n    if (!isMounted.current) return;\n    \n    try {\n      const cachedData = getCachedData();\n      if (cachedData) {\n        updateTickerItems(cachedData.items);\n        setLastUpdated(cachedData.lastUpdated);\n        setIsLoading(false);\n        if (Date.now() - cachedData.lastUpdated < 60000) {\n          return;\n        }\n      }\n      \n      setIsLoading(true);\n      setError(null);\n      \n      const response = await fetchWithRetry(\n        'https://api.coingecko.com/api/v3/coins/markets',\n        {\n          params: {\n            vs_currency: 'usd',\n            ids: 'bitcoin,ethereum,pax-gold',\n            price_change_percentage: '24h',\n          },\n        }\n      );\n      \n      const data = response.data.reduce((acc: any, coin: any) => {\n        acc[coin.id] = coin;\n        return acc;\n      }, {});\n      \n      const btcData = data.bitcoin;\n      const ethData = data.ethereum;\n      const goldData = data['pax-gold'];\n      \n      if (!btcData || !ethData || !goldData) {\n        throw new Error('Incomplete data received from API');\n      }\n      \n      const btcEthPrice = btcData.current_price / ethData.current_price;\n      const btcEthChange24h = ((btcData.price_change_percentage_24h - ethData.price_change_percentage_24h) / \n        (1 + ethData.price_change_percentage_24h / 100)) || 0;\n      \n      const goldPricePerOz = goldData.current_price * 31.1;\n      const btcGoldPrice = btcData.current_price / goldPricePerOz;\n      \n      const updatedItems: TickerItem[] = [\n        { \n          id: 'btc-usd', \n          label: 'BTC/USD', \n          currentPrice: btcData.current_price, \n          priceChange24h: btcData.price_change_percentage_24h, \n          currencySymbol: '$' \n        },\n        { \n          id: 'btc-eur', \n          label: 'BTC/EUR', \n          currentPrice: btcData.current_price * 0.9,\n          priceChange24h: btcData.price_change_percentage_24h, \n          currencySymbol: '€' \n        },\n        { \n          id: 'btc-eth', \n          label: 'BTC/ETH', \n          currentPrice: btcEthPrice, \n          priceChange24h: btcEthChange24h, \n          currencySymbol: 'Ξ' \n        },\n        { \n          id: 'btc-gold', \n          label: 'Gold (oz)', \n          currentPrice: btcGoldPrice, \n          priceChange24h: btcData.price_change_percentage_24h, \n          currencySymbol: 'oz' \n        },\n      ];\n      \n      updateTickerItems(updatedItems);\n      setLastUpdated(Date.now());\n      saveToCache(updatedItems);\n      \n    } catch (err) {\n      console.error('Error fetching price data:', err);\n      setError('Failed to fetch live data. Using cached data if available.');\n      const cachedData = getCachedData();\n      if (cachedData) {\n        updateTickerItems(cachedData.items);\n        setLastUpdated(cachedData.lastUpdated);\n      }\n    } finally {\n      if (isMounted.current) {\n        setIsLoading(false);\n      }\n    }\n  }, [saveToCache, updateTickerItems]);\n\n  useEffect(() => {\n    isMounted.current = true;\n    fetchBtcPrice();\n    \n    const intervalId = setInterval(fetchBtcPrice, REFRESH_INTERVAL);\n    \n    return () => {\n      isMounted.current = false;\n      clearInterval(intervalId);\n    };\n  }, [fetchBtcPrice]);\n\n  return {\n    items: tickerItems,\n    isLoading,\n    error,\n    lastUpdated,\n    refresh: fetchBtcPrice,\n  };\n};\n\nexport default useBtcPrice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}