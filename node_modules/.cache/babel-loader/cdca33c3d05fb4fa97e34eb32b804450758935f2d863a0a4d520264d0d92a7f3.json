{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n// Cache for storing API responses\nconst CACHE_KEY = 'btcPriceData';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Helper functions outside the hook\nconst getCachedData = () => {\n  const cached = localStorage.getItem(CACHE_KEY);\n  if (!cached) return null;\n  try {\n    const {\n      data,\n      timestamp\n    } = JSON.parse(cached);\n    // Return cached data if it's still fresh\n    if (Date.now() - timestamp < CACHE_DURATION) {\n      return data;\n    }\n  } catch (e) {\n    console.error('Error reading cache:', e);\n  }\n  return null;\n};\nconst saveToCache = data => {\n  try {\n    localStorage.setItem(CACHE_KEY, JSON.stringify({\n      data,\n      timestamp: Date.now()\n    }));\n  } catch (e) {\n    console.error('Error saving to cache:', e);\n  }\n};\nconst useBtcPrice = (refreshInterval = 60000) => {\n  _s();\n  const [tickerItems, setTickerItems] = useState([{\n    id: 'btc-usd',\n    label: 'BTC/USD',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: '$'\n  }, {\n    id: 'btc-eur',\n    label: 'BTC/EUR',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: '€'\n  }, {\n    id: 'btc-eth',\n    label: 'BTC/ETH',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: 'Ξ'\n  }, {\n    id: 'btc-gold',\n    label: 'Gold (oz)',\n    currentPrice: null,\n    priceChange24h: null,\n    currencySymbol: 'oz'\n  }]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const fetchBtcPrice = useCallback(async () => {\n    try {\n      // Check cache first\n      const cachedData = getCachedData();\n      if (cachedData) {\n        setTickerItems(cachedData.items);\n        setLastUpdated(cachedData.lastUpdated);\n        setIsLoading(false);\n        setError(null);\n        return; // Use cached data if available\n      }\n      setIsLoading(true);\n      setError(null);\n\n      // Fetch BTC prices with rate limit handling\n      // Remove unused eurUsdResponse since we don't need it\n      const [btcResponse, ethResponse, goldResponse] = await Promise.all([\n      // BTC/USD and BTC/EUR\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'bitcoin',\n          vs_currencies: 'usd,eur',\n          include_24hr_change: true\n        }\n      }),\n      // ETH/USD for BTC/ETH conversion\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'ethereum',\n          vs_currencies: 'usd',\n          include_24hr_change: true\n        }\n      }),\n      // Gold price in USD (approximate)\n      axios.get('https://api.coingecko.com/api/v3/simple/price', {\n        params: {\n          ids: 'pax-gold',\n          vs_currencies: 'usd'\n        }\n      })]);\n      const btcData = btcResponse.data.bitcoin;\n      const ethData = ethResponse.data.ethereum;\n      const goldData = goldResponse.data['pax-gold'];\n\n      // Calculate BTC/ETH price\n      const btcEthPrice = btcData.usd / ethData.usd;\n      const btcEthChange24h = (btcData.usd_24h_change - ethData.usd_24h_change) / (1 + ethData.usd_24h_change / 100) || 0;\n\n      // Calculate BTC/Gold price (gold price is per gram, converting to oz)\n      const goldPricePerOz = goldData.usd * 31.1; // 1 oz = 31.1 grams\n      const btcGoldPrice = btcData.usd / goldPricePerOz;\n\n      // Update ticker items with new data\n      setTickerItems(prevItems => prevItems.map(item => {\n        switch (item.id) {\n          case 'btc-usd':\n            return {\n              ...item,\n              currentPrice: btcData.usd,\n              priceChange24h: btcData.usd_24h_change\n            };\n          case 'btc-eur':\n            return {\n              ...item,\n              currentPrice: btcData.eur,\n              priceChange24h: btcData.eur_24h_change\n            };\n          case 'btc-eth':\n            return {\n              ...item,\n              currentPrice: btcEthPrice,\n              priceChange24h: btcEthChange24h\n            };\n          case 'btc-gold':\n            return {\n              ...item,\n              currentPrice: btcGoldPrice,\n              priceChange24h: btcData.usd_24h_change\n            };\n          default:\n            return item;\n        }\n      }));\n      const result = {\n        items: tickerItems.map(item => ({\n          ...item,\n          currentPrice: item.id === 'btc-usd' ? btcData.usd : item.id === 'btc-eur' ? btcData.eur : item.id === 'btc-eth' ? btcEthPrice : item.id === 'btc-gold' ? btcGoldPrice : item.currentPrice,\n          priceChange24h: item.id === 'btc-eth' ? btcEthChange24h : item.id === 'btc-usd' ? btcData.usd_24h_change : item.id === 'btc-eur' ? btcData.eur_24h_change : item.id === 'btc-gold' ? btcData.usd_24h_change : item.priceChange24h\n        })),\n        isLoading: false,\n        error: null,\n        lastUpdated: Date.now()\n      };\n      setTickerItems(result.items);\n      setLastUpdated(result.lastUpdated);\n      saveToCache(result);\n    } catch (err) {\n      console.error('Error fetching price data:', err);\n      setError('Failed to fetch price data');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    // Initial fetch\n    fetchBtcPrice();\n\n    // Set up effect for fetching data\n    const intervalId = setInterval(fetchBtcPrice, refreshInterval);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [refreshInterval, fetchBtcPrice]);\n\n  // Update ticker items with new data\n  const updateTickerItems = useCallback(newItems => {\n    setTickerItems(prevItems => {\n      return prevItems.map(item => {\n        const updatedItem = newItems.find(newItem => newItem.id === item.id);\n        return updatedItem ? {\n          ...item,\n          ...updatedItem\n        } : item;\n      });\n    });\n  }, []);\n  return {\n    items: tickerItems,\n    isLoading,\n    error,\n    lastUpdated\n  };\n};\n_s(useBtcPrice, \"zidEHdv4TZCHM/ZdnoMu3xPqiwE=\");\nexport default useBtcPrice;","map":{"version":3,"names":["useState","useEffect","useCallback","axios","CACHE_KEY","CACHE_DURATION","getCachedData","cached","localStorage","getItem","data","timestamp","JSON","parse","Date","now","e","console","error","saveToCache","setItem","stringify","useBtcPrice","refreshInterval","_s","tickerItems","setTickerItems","id","label","currentPrice","priceChange24h","currencySymbol","isLoading","setIsLoading","setError","lastUpdated","setLastUpdated","fetchBtcPrice","cachedData","items","btcResponse","ethResponse","goldResponse","Promise","all","get","params","ids","vs_currencies","include_24hr_change","btcData","bitcoin","ethData","ethereum","goldData","btcEthPrice","usd","btcEthChange24h","usd_24h_change","goldPricePerOz","btcGoldPrice","prevItems","map","item","eur","eur_24h_change","result","err","intervalId","setInterval","clearInterval","updateTickerItems","newItems","updatedItem","find","newItem"],"sources":["/Users/ocean/code/paucotan/personal_projects/btc-price-diff/src/components/LiveBtcPrice/useBtcPrice.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nexport interface TickerItem {\n  id: string;\n  label: string;\n  currentPrice: number | null;\n  priceChange24h: number | null;\n  currencySymbol?: string;\n}\n\ninterface BtcPriceData {\n  items: TickerItem[];\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: number | null;\n}\n\n// Cache for storing API responses\nconst CACHE_KEY = 'btcPriceData';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n// Helper functions outside the hook\nconst getCachedData = (): BtcPriceData | null => {\n  const cached = localStorage.getItem(CACHE_KEY);\n  if (!cached) return null;\n  \n  try {\n    const { data, timestamp } = JSON.parse(cached);\n    // Return cached data if it's still fresh\n    if (Date.now() - timestamp < CACHE_DURATION) {\n      return data;\n    }\n  } catch (e) {\n    console.error('Error reading cache:', e);\n  }\n  return null;\n};\n\nconst saveToCache = (data: BtcPriceData) => {\n  try {\n    localStorage.setItem(CACHE_KEY, JSON.stringify({\n      data,\n      timestamp: Date.now()\n    }));\n  } catch (e) {\n    console.error('Error saving to cache:', e);\n  }\n};\n\nconst useBtcPrice = (refreshInterval = 60000): BtcPriceData => {\n  const [tickerItems, setTickerItems] = useState<TickerItem[]>([\n    { id: 'btc-usd', label: 'BTC/USD', currentPrice: null, priceChange24h: null, currencySymbol: '$' },\n    { id: 'btc-eur', label: 'BTC/EUR', currentPrice: null, priceChange24h: null, currencySymbol: '€' },\n    { id: 'btc-eth', label: 'BTC/ETH', currentPrice: null, priceChange24h: null, currencySymbol: 'Ξ' },\n    { id: 'btc-gold', label: 'Gold (oz)', currentPrice: null, priceChange24h: null, currencySymbol: 'oz' },\n  ]);\n  \n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<number | null>(null);\n\n  const fetchBtcPrice = useCallback(async (): Promise<void> => {\n    try {\n      // Check cache first\n      const cachedData = getCachedData();\n      if (cachedData) {\n        setTickerItems(cachedData.items);\n        setLastUpdated(cachedData.lastUpdated);\n        setIsLoading(false);\n        setError(null);\n        return; // Use cached data if available\n      }\n\n      setIsLoading(true);\n      setError(null);\n      \n      // Fetch BTC prices with rate limit handling\n      // Remove unused eurUsdResponse since we don't need it\n      const [btcResponse, ethResponse, goldResponse] = await Promise.all([\n        // BTC/USD and BTC/EUR\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'bitcoin',\n            vs_currencies: 'usd,eur',\n            include_24hr_change: true,\n          },\n        }),\n        // ETH/USD for BTC/ETH conversion\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'ethereum',\n            vs_currencies: 'usd',\n            include_24hr_change: true,\n          },\n        }),\n        // Gold price in USD (approximate)\n        axios.get('https://api.coingecko.com/api/v3/simple/price', {\n          params: {\n            ids: 'pax-gold',\n            vs_currencies: 'usd',\n          },\n        })\n      ]);\n\n      const btcData = btcResponse.data.bitcoin;\n      const ethData = ethResponse.data.ethereum;\n      const goldData = goldResponse.data['pax-gold'];\n      \n      // Calculate BTC/ETH price\n      const btcEthPrice = btcData.usd / ethData.usd;\n      const btcEthChange24h = ((btcData.usd_24h_change - ethData.usd_24h_change) / \n        (1 + ethData.usd_24h_change / 100)) || 0;\n\n      // Calculate BTC/Gold price (gold price is per gram, converting to oz)\n      const goldPricePerOz = goldData.usd * 31.1; // 1 oz = 31.1 grams\n      const btcGoldPrice = btcData.usd / goldPricePerOz;\n\n\n      \n      // Update ticker items with new data\n      setTickerItems(prevItems => prevItems.map(item => {\n        switch (item.id) {\n          case 'btc-usd':\n            return { ...item, currentPrice: btcData.usd, priceChange24h: btcData.usd_24h_change };\n          case 'btc-eur':\n            return { ...item, currentPrice: btcData.eur, priceChange24h: btcData.eur_24h_change };\n          case 'btc-eth':\n            return { ...item, currentPrice: btcEthPrice, priceChange24h: btcEthChange24h };\n          case 'btc-gold':\n            return { ...item, currentPrice: btcGoldPrice, priceChange24h: btcData.usd_24h_change };\n          default:\n            return item;\n        }\n      }));\n      \n      const result = {\n        items: tickerItems.map(item => ({\n          ...item,\n          currentPrice: item.id === 'btc-usd' ? btcData.usd : \n                        item.id === 'btc-eur' ? btcData.eur :\n                        item.id === 'btc-eth' ? btcEthPrice :\n                        item.id === 'btc-gold' ? btcGoldPrice : item.currentPrice,\n          priceChange24h: item.id === 'btc-eth' ? btcEthChange24h : \n                          item.id === 'btc-usd' ? btcData.usd_24h_change :\n                          item.id === 'btc-eur' ? btcData.eur_24h_change :\n                          item.id === 'btc-gold' ? btcData.usd_24h_change : item.priceChange24h\n        })),\n        isLoading: false,\n        error: null,\n        lastUpdated: Date.now()\n      };\n      \n      setTickerItems(result.items);\n      setLastUpdated(result.lastUpdated);\n      saveToCache(result);\n    } catch (err) {\n      console.error('Error fetching price data:', err);\n      setError('Failed to fetch price data');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Initial fetch\n    fetchBtcPrice();\n\n    // Set up effect for fetching data\n    const intervalId = setInterval(fetchBtcPrice, refreshInterval);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [refreshInterval, fetchBtcPrice]);\n\n  // Update ticker items with new data\n  const updateTickerItems = useCallback((newItems: TickerItem[]) => {\n    setTickerItems(prevItems => {\n      return prevItems.map(item => {\n        const updatedItem = newItems.find(newItem => newItem.id === item.id);\n        return updatedItem ? { ...item, ...updatedItem } : item;\n      });\n    });\n  }, []);\n\n  return {\n    items: tickerItems,\n    isLoading,\n    error,\n    lastUpdated,\n  };\n};\n\nexport default useBtcPrice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}